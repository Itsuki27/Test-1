@model IEnumerable<WebApplication1.Models.MOVEHIST>

@{
    ViewBag.Title = "Audit Logs";
}

@*<h2>Audit Logs</h2>*@

<div class="form-horizontal d-flex flex-column p-5">
    <h2 class="text-center">Audit Log</h2>
    <hr />
    <h6>Table Filters</h6>

    <table id="tblAudit2" class="justify-content-center small">
        <thead>
            <tr>
                <th id="tbId">ID</th>
                <th id="tbMac">MAC ADDRESS</th>
                <th id="tbType">TYPE</th>
                @*<th id="tbOld">@Html.DisplayNameFor(model => model.OLD_DATA)</th>
                    <th id="tbNew">@Html.DisplayNameFor(model => model.NEW_DATA)</th>*@
                <th id="tbDate">@Html.DisplayNameFor(model => model.D_ACTION)</th>
                <th id="tbTime">@Html.DisplayNameFor(model => model.T_ACTION)</th>
                <th id="tbBy">@Html.DisplayNameFor(model => model.ACTION_BY)</th>
                <th id="tbUid">UID</th>
            </tr>
        </thead>
    </table>

    <table id="tblAudit" class="table table-bordered table-striped table-light small">

        <thead>
            <tr>
                <th>ID</th>
                <th>MAC_ADD</th>
                <th>@Html.DisplayNameFor(model => model.TYPE)</th>
                <th>@Html.DisplayNameFor(model => model.OLD_DATA)</th>
                <th>@Html.DisplayNameFor(model => model.NEW_DATA)</th>
                <th>@Html.DisplayNameFor(model => model.OLD_SAL)</th>
                <th>@Html.DisplayNameFor(model => model.NEW_SAL)</th>
                <th>@Html.DisplayNameFor(model => model.D_ACTION)</th>
                <th>@Html.DisplayNameFor(model => model.T_ACTION)</th>
                <th>@Html.DisplayNameFor(model => model.DESCRIPTION)</th>
                <th>@Html.DisplayNameFor(model => model.ACTION_BY)</th>
                <th>UID</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.MOVEHIST_ID)</td>
                    <td>@Html.DisplayFor(modelItem => item.MAC_ADDRESS)</td>
                    <td>@Html.DisplayFor(modelItem => item.TYPE)</td>
                    <td>@Html.DisplayFor(modelItem => item.OLD_DATA)</td>
                    <td>@Html.DisplayFor(modelItem => item.NEW_DATA)</td>
                    <td>@Html.DisplayFor(modelItem => item.OLD_SAL)</td>
                    <td>@Html.DisplayFor(modelItem => item.NEW_SAL)</td>
                    <td>@Html.DisplayFor(modelItem => item.D_ACTION)</td>
                    <td>@Html.DisplayFor(modelItem => item.T_ACTION)</td>
                    <td>@Html.DisplayFor(modelItem => item.DESCRIPTION)</td>
                    <td>@Html.DisplayFor(modelItem => item.ACTION_BY)</td>
                    <td>@Html.DisplayFor(modelItem => item.Id)</td>
                </tr>
            }
        </tbody>

        <tfoot>
            <tr>
                <th>ID</th>
                <th>MAC_ADD</th>
                <th>@Html.DisplayNameFor(model => model.TYPE)</th>
                <th>@Html.DisplayNameFor(model => model.OLD_DATA)</th>
                <th>@Html.DisplayNameFor(model => model.NEW_DATA)</th>
                <th>@Html.DisplayNameFor(model => model.OLD_SAL)</th>
                <th>@Html.DisplayNameFor(model => model.NEW_SAL)</th>
                <th>@Html.DisplayNameFor(model => model.D_ACTION)</th>
                <th>@Html.DisplayNameFor(model => model.T_ACTION)</th>
                <th>@Html.DisplayNameFor(model => model.DESCRIPTION)</th>
                <th>@Html.DisplayNameFor(model => model.ACTION_BY)</th>
                <th>UID</th>
            </tr>
        </tfoot>

    </table>
    <p class="mx-auto">
        @Html.ActionLink("User Masterlist", "Index", "Users", new { area = "" }, new { @class = "btn btn-outline-primary" })
    </p>
</div>

    @*Table Design and Features Imports*@

    <link href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
    <script src="https://cdn.datatables.net/2.1.8/js/dataTables.js"></script>

    @*Excel Export*@

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

    @*PDF Export*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>

    @*Export Button Features*@

    <script src="https://cdn.datatables.net/buttons/3.2.0/js/dataTables.buttons.js"></script>
    <script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.html5.min.js"></script>

    @*Search Panes*@
    <script src="https://cdn.datatables.net/searchpanes/2.3.3/js/dataTables.searchPanes.js"></script>
    <script src="https://cdn.datatables.net/searchpanes/2.3.3/js/searchPanes.dataTables.js"></script>

    @*Selecting Data Tables*@
    <script src="https://cdn.datatables.net/select/2.1.0/js/dataTables.select.js"></script>
    <script src="https://cdn.datatables.net/select/2.1.0/js/select.dataTables.js"></script>

    @*Alerts*@
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script nonce="myScript">

        let tbId = document.getElementById('tbId');
        let tbMac = document.getElementById('tbMac');
        let tbType = document.getElementById('tbType');
        let tbOld = document.getElementById('tbOld');
        let tbNew = document.getElementById('tbNew');
        let tbDate = document.getElementById('tbDate');
        let tbTime = document.getElementById('tbTime');
        let tbBy = document.getElementById('tbBy');
        let tbUid = document.getElementById('tbUid');

    $(document).ready(function () {
        new DataTable('#tblAudit', {
            layout: {
                top: 'pageLength',
                topStart: {
                    buttons: [

                        { extend: 'excel', className: 'btn btn-outline-success btn-sm px-3 py-2' },
                        { extend: 'pdf', orientation: 'landscape', className: 'btn btn-outline-danger btn-sm px-3 py-2 mx-1' }

                    ],
                },
            },

            initComplete: function () {
                //Action ID Filter
                this.api()
                    .columns([0])
                    .every(function () {
                        let column = this;
                        let actId = column.header().textContent;

                        // Create input element
                        let input = document.createElement('input');
                        input.placeholder = actId;
                        tbId.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //MAC Address Filter
                this.api()
                    .columns([1])
                    .every(function () {
                        let column = this;
                        let mac = column.header().textContent;

                        // Create input element
                        let input = document.createElement('input');
                        input.placeholder = mac;
                        tbMac.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //Action Type Filter
                this.api()
                    .columns([2])
                    .every(function () {
                        let column = this;
                        let type = column.header().textContent;

                        // Create input element
                        let input = document.createElement('input');
                        input.placeholder = type;
                        tbType.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //Date Action Filter
                this.api()
                    .columns([7])
                    .every(function () {
                        let column = this;
                        let date = column.header().textContent;

                        // Create input element
                        let input = document.createElement('input');
                        input.placeholder = date;
                        input.className = "text-justify";
                        tbDate.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //Action By Filter
                this.api()
                    .columns([8])
                    .every(function () {
                        let column = this;
                        let time = column.header().textContent;

                        // Create input element
                        let input = document.createElement('input');
                        input.placeholder = time;
                        input.className = "text-justify";
                        tbTime.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //Action By Filter
                this.api()
                    .columns([10])
                    .every(function () {
                        let column = this;
                        let actBy = column.header().textContent;

                        // Create input element
                        let input = document.createElement('input');
                        input.placeholder = actBy;
                        input.className = "text-justify";
                        tbBy.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //UID Filter
                this.api()
                    .columns([11])
                    .every(function () {
                        let column = this;
                        let uid = column.header().textContent;

                        // Create input element
                        let input = document.createElement('input');
                        input.placeholder = uid;
                        tbUid.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });
            }

            //initComplete: function () {

            //    // Action Type Filter
            //    this.api()
            //        .columns([2])
            //        .every(function () {

            //            var column3 = this;
            //            var select3 = $('<select class="form-control form-control-sm"><option value="">Show All</option></select>')

            //                .appendTo($('#type').empty())
            //                .on('change', function () {
            //                    var val = $.fn.dataTable.util.escapeRegex(
            //                        $(this).val()
            //                    );

            //                    column3
            //                        .search(val ? '^' + val + '$' : '', true, false)
            //                        .draw();
            //                });

            //            column3.data().unique().sort().each(function (d, j) {
            //                var val = $('<div/>').html(d).text();
            //                select3.append('<option value="' + val + '">' + val + '</option>');
            //            });
            //        });

            //    // Action By Filter
            //    this.api()
            //        .columns([10])
            //        .every(function () {

            //            var column10 = this;
            //            var select10 = $('<select class="form-control form-control-sm"><option value="">Show All</option></select>')

            //                .appendTo($('#action_by').empty())
            //                .on('change', function () {
            //                    var val = $.fn.dataTable.util.escapeRegex(
            //                        $(this).val()
            //                    );

            //                    column10
            //                        .search(val ? '^' + val + '$' : '', true, false)
            //                        .draw();
            //                });

            //            column10.data().unique().sort().each(function (d, j) {
            //                var val = $('<div/>').html(d).text();
            //                select10.append('<option value="' + val + '">' + val + '</option>');
            //            });
            //        });

            //}
            });

    });
    </script>
