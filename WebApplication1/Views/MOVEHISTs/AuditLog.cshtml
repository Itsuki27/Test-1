@model IEnumerable<WebApplication1.Models.MOVEHIST>

@{
    ViewBag.Title = "Audit Logs";
}

@*<h2>Audit Logs</h2>*@

<div class="form-horizontal d-flex flex-column p-5">
    <h2 class="text-center">Audit Log</h2>
    <hr />
    <h6>Table Filters</h6>

    <table id="tblAudit2" class="justify-content-center small">
        <thead>
            <tr>
                <th id="tbId">ID</th>
                <th id="tbMac">MAC ADDRESS</th>
                <th id="tbType">TYPE</th>
                @*<th id="tbOld">@Html.DisplayNameFor(model => model.OLD_DATA)</th>
                    <th id="tbNew">@Html.DisplayNameFor(model => model.NEW_DATA)</th>*@
                <th id="tbDate">@Html.DisplayNameFor(model => model.D_ACTION)</th>
                <th id="tbTime">@Html.DisplayNameFor(model => model.T_ACTION)</th>
                <th id="tbBy">@Html.DisplayNameFor(model => model.ACTION_BY)</th>
                <th id="tbUid">UID</th>
            </tr>
        </thead>
    </table>

    <table id="tblAudit" class="table table-bordered table-striped table-light small dataTable">

        <thead>
            <tr>
                <th>ID</th>
                <th>MAC_ADD</th>
                <th>@Html.DisplayNameFor(model => model.TYPE)</th>
                <th>@Html.DisplayNameFor(model => model.OLD_DATA)</th>
                <th>@Html.DisplayNameFor(model => model.NEW_DATA)</th>
                <th>@Html.DisplayNameFor(model => model.OLD_SAL)</th>
                <th>@Html.DisplayNameFor(model => model.NEW_SAL)</th>
                <th>@Html.DisplayNameFor(model => model.D_ACTION)</th>
                <th>@Html.DisplayNameFor(model => model.T_ACTION)</th>
                <th>@Html.DisplayNameFor(model => model.DESCRIPTION)</th>
                <th>@Html.DisplayNameFor(model => model.ACTION_BY)</th>
                <th>UID</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.MOVEHIST_ID)</td>
                    <td>@Html.DisplayFor(modelItem => item.MAC_ADDRESS)</td>
                    <td>@Html.DisplayFor(modelItem => item.TYPE)</td>
                    <td>@Html.DisplayFor(modelItem => item.OLD_DATA)</td>
                    <td>@Html.DisplayFor(modelItem => item.NEW_DATA)</td>
                    <td>@Html.DisplayFor(modelItem => item.OLD_SAL)</td>
                    <td>@Html.DisplayFor(modelItem => item.NEW_SAL)</td>
                    <td>@Html.DisplayFor(modelItem => item.D_ACTION)</td>
                    <td>@Html.DisplayFor(modelItem => item.T_ACTION)</td>
                    <td>@Html.DisplayFor(modelItem => item.DESCRIPTION)</td>
                    <td>@Html.DisplayFor(modelItem => item.ACTION_BY)</td>
                    <td>@Html.DisplayFor(modelItem => item.Id)</td>
                </tr>
            }
        </tbody>

        <tfoot>
            <tr>
                <th>ID</th>
                <th>MAC_ADD</th>
                <th>@Html.DisplayNameFor(model => model.TYPE)</th>
                <th>@Html.DisplayNameFor(model => model.OLD_DATA)</th>
                <th>@Html.DisplayNameFor(model => model.NEW_DATA)</th>
                <th>@Html.DisplayNameFor(model => model.OLD_SAL)</th>
                <th>@Html.DisplayNameFor(model => model.NEW_SAL)</th>
                <th>@Html.DisplayNameFor(model => model.D_ACTION)</th>
                <th>@Html.DisplayNameFor(model => model.T_ACTION)</th>
                <th>@Html.DisplayNameFor(model => model.DESCRIPTION)</th>
                <th>@Html.DisplayNameFor(model => model.ACTION_BY)</th>
                <th>UID</th>
            </tr>
        </tfoot>

    </table>
    <p class="mx-auto">
        @Html.ActionLink("User Masterlist", "Index", "Users", new { area = "" }, new { @class = "btn btn-outline-primary" })
    </p>
</div>

@section scripts{



}

<!-- Table Design and Features CSS -->
<link href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css" />

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.7.1.js"></script>

<!-- DataTables Core JavaScript -->
<script src="https://cdn.datatables.net/2.1.8/js/dataTables.js"></script>

<!-- Excel Export -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

<!-- PDF Export -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>

<!-- Export Button Features -->
<script src="https://cdn.datatables.net/buttons/3.2.0/js/dataTables.buttons.js"></script>
<script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/3.2.0/js/buttons.print.min.js"></script>

<!-- Search Panes -->
<script src="https://cdn.datatables.net/searchpanes/2.3.3/js/dataTables.searchPanes.js"></script>
<script src="https://cdn.datatables.net/searchpanes/2.3.3/js/searchPanes.dataTables.js"></script>

<!-- Selecting Data Tables -->
<script src="https://cdn.datatables.net/select/2.1.0/js/dataTables.select.js"></script>
<script src="https://cdn.datatables.net/select/2.1.0/js/select.dataTables.js"></script>

<!-- Alerts -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script nonce="myScript">

    var tbId = document.getElementById('tbId');
    var tbMac = document.getElementById('tbMac');
    var tbType = document.getElementById('tbType');
    var tbOld = document.getElementById('tbOld');
    var tbNew = document.getElementById('tbNew');
    var tbDate = document.getElementById('tbDate');
    var tbTime = document.getElementById('tbTime');
    var tbBy = document.getElementById('tbBy');
    var tbUid = document.getElementById('tbUid');

    $(document).ready(function () {
        new DataTable('#tblAudit', {
            layout: {
                top: 'pageLength',
                topStart: {
                    buttons: [

                        { extend: 'excel', className: 'btn btn-outline-success btn-sm px-3 py-2' },
                        { extend: 'pdf', orientation: 'landscape', className: 'btn btn-outline-danger btn-sm px-3 py-2 mx-1' }

                    ],
                },
            },

            initComplete: function () {
                //Action ID Filter
                this.api()
                    .columns([0])
                    .every(function () {
                        var column = this;
                        var actId = column.header().textContent;

                        // Create input element
                        var input = document.createElement('input');
                        input.placeholder = actId;
                        tbId.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //MAC Address Filter
                this.api()
                    .columns([1])
                    .every(function () {
                        var column = this;
                        var mac = column.header().textContent;

                        // Create input element
                        var input = document.createElement('input');
                        input.placeholder = mac;
                        tbMac.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //Action Type Filter
                this.api()
                    .columns([2])
                    .every(function () {
                        var column = this;
                        var type = column.header().textContent;

                        var select = $('<select class="form-control form-control-sm"><option value="">--Action Type--</option></select>')
                            .appendTo($('#tbType').empty())
                            .on('change', function () {
                                if (column.search() !== this.value) {
                                    column.search(this.value).draw();
                                }

                                column
                                    .search(val ? '^' + val + '$' : '', true, false)
                                    .draw();
                            });

                        column.data().unique().sort().each(function (d, j) {
                            var val = $('<div/>').html(d).text();
                            select.append('<option value="' + val + '">' + val + '</option>');
                        });
                    });

                //Date Action Filter
                this.api()
                    .columns([7])
                    .every(function () {
                        var column = this;
                        var date = column.header().textContent;

                        // Create input element
                        var input = document.createElement('input');
                        input.placeholder = date;
                        input.className = "text-justify";
                        tbDate.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //Time Action Filter
                this.api()
                    .columns([8])
                    .every(function () {
                        var column = this;
                        var time = column.header().textContent;

                        // Create input element
                        var input = document.createElement('input');
                        input.placeholder = time;
                        input.className = "text-justify";
                        tbTime.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });

                //Action By Filter
                this.api()
                    .columns([10])
                    .every(function () {
                        var column = this;
                        var type = column.header().textContent;

                        var select = $('<select class="form-control form-control-sm"><option value="">--Action By--</option></select>')
                            .appendTo($('#tbBy').empty())
                            .on('change', function () {
                                if (column.search() !== this.value) {
                                    column.search(this.value).draw();
                                }

                                column
                                    .search(val ? '^' + val + '$' : '', true, false)
                                    .draw();
                            });

                        column.data().unique().sort().each(function (d, j) {
                            var val = $('<div/>').html(d).text();
                            select.append('<option value="' + val + '">' + val + '</option>');
                        });
                    });

                //UID Filter
                this.api()
                    .columns([11])
                    .every(function () {
                        var column = this;
                        var uid = column.header().textContent;

                        // Create input element
                        var input = document.createElement('input');
                        input.placeholder = uid;
                        tbUid.replaceChildren(input);

                        // Event listener for user input
                        input.addEventListener('keyup', () => {
                            if (column.search() !== this.value) {
                                column.search(input.value).draw();
                            }
                        });
                    });
            }
        });

    });
</script>